-- DATA CLEANUP OF 'TECH LAYOFFS DATASET FROM COVID 2019 TO PRESENT' FOUND @ https://www.kaggle.com/datasets/swaptr/layoffs-2022

-- RAW DATA
SELECT * FROM var_layoffs;

-- SETUP TEMP TABLE 
#CREATE TABLE layoffs
#LIKE var_layoffs;

#SELECT *
#FROM layoffs;

#INSERT layoffs
#SELECT *
#FROM var_layoffs;

-- THINGS TO DO: 
-- 1. REMOVE DUPLICATES | 2. STANDARDIZE DATA | 3. DEAL WITH NULLS AND BLANKS | 4. REMOVE BAD COLUMNS

-- 1. REMOVE DUPLICATES... BY USING WINDOWS FUNCTION 'ROW_NUMBER' WHICH ASSIGNS A SEQUENTIAL NUMBER TO UNIQUE ROWS IN EACH ASSIGNED PARTITION. 

SELECT *,
ROW_NUMBER() OVER(
PARTITION BY 
	company, 
    industry, 
    location, 
    total_laid_off, 
    percentage_laid_off, 
    `date`, 
    stage, 
    funds_raised, 
    country) AS row_num
FROM layoffs;

-- USE CTE TO ISOLATE DUPLICATES
WITH duplicate_cte AS
(
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY 
	company, 
    industry, 
    location, 
    total_laid_off, 
    percentage_laid_off, 
    `date`, 
    stage, 
    funds_raised, 
    country) AS row_num
FROM layoffs
)
SELECT *
FROM duplicate_cte
WHERE row_num > 1;

-- CONFIRM THEY ARE DUPLICATES
SELECT *
FROM layoffs
WHERE company IN ('Cazoo', 'Beyond Meat');

-- CREATE NEW TABLE TO DUMP ROWS INTO AND REMOVE ROW_NUM 2+
CREATE TABLE `layoffs_staging` (
  `company` TEXT,
  `location` TEXT,
  `total_laid_off` TEXT,
  `date` TEXT,
  `percentage_laid_off` TEXT,
  `industry` TEXT,
  `source` TEXT,
  `stage` TEXT,
  `funds_raised` TEXT,
  `country` TEXT,
  `date_added` TEXT,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT *
FROM layoffs_staging;

INSERT INTO layoffs_staging
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY 
	company, 
    industry, 
    location, 
    total_laid_off, 
    percentage_laid_off, 
    `date`, 
    stage, 
    funds_raised, 
    country) AS row_num
FROM layoffs;

-- CONFIRM DATA INSERT
SELECT *
FROM layoffs_staging
WHERE row_num > 1;

-- DELETE DUPLICATES
DELETE
FROM layoffs_staging
WHERE row_num > 1;

-- 2. STANDARDIZE DATA ... TRIMMING DATA / CONVERTING THE DATE 

-- TRIMMING THE COMPANY NAME
SELECT company, TRIM(company)
FROM layoffs_staging;

UPDATE layoffs_staging
SET company = TRIM(company);

-- SEARCHING THROUGH COLUMNS FOR ISSUES
SELECT *
FROM layoffs_staging;

SELECT DISTINCT country
FROM layoffs_staging
ORDER BY 1;

-- CONVERT DATE FROM TEXT TYPE TO DATE TYPE
SELECT `date`, str_to_date(`date`, '%m/%d/%Y')
FROM layoffs_staging;

UPDATE layoffs_staging
SET `date` = str_to_date(`date`, '%m/%d/%Y');

ALTER TABLE layoffs_staging
MODIFY COLUMN `date` DATE;

-- REMOVE EXTRA CHARACTERS FROM END OF DATA
SELECT country, TRIM(TRAILING '-' FROM country)
FROM layoffs_staging
WHERE country like '%Canada%';

UPDATE layoffs_staging
SET country = TRIM(TRAILING '-' FROM country)
WHERE country like '%Canada%';

-- NULLS ...
SELECT *
FROM layoffs_staging;

-- REMOVED ROWS WITH NO LAYOFF DATA
SELECT *
#DELETE
FROM layoffs_staging
WHERE (total_laid_off IS NULL OR total_laid_off = '')
AND (percentage_laid_off IS NULL OR percentage_laid_off = ''); 

SELECT *
FROM layoffs_staging
WHERE industry IS NULL
	OR industry = '';
    
SELECT company, industry
FROM layoffs_staging
WHERE company in ('Eyeo', 'Appsmith', '&Open');

SELECT *
FROM layoffs_staging t1
JOIN layoffs_staging t2
	ON t1.company = t2.company
    and t1.location = t2.location
WHERE (t1.industry = '' OR t1.industry IS NULL)
AND t2.industry != '';

-- REPLACING BLANKS WITH NULLS
#UPDATE
#SET
#WHERE

-- REMOVE ROW_NUM
ALTER TABLE layoffs_staging
DROP COLUMN row_num;

SELECT *
FROM layoffs_staging;

